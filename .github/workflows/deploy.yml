name: Post-Deploy Smoke Tests (FastCloud)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: burns-database-postdeploy
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  post_deploy_checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      APP_NAME: ${{ vars.APP_NAME || 'burns-database' }}
      BASE_URL: ${{ vars.BASE_URL || 'https://burns-database.fastmcp.app' }}
      BDB_AUTH_TOKEN: ${{ secrets.BDB_AUTH_TOKEN }}
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}               # used only for printing

    steps:
      - uses: actions/checkout@v4

      - name: Install jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Guard — APP_NAME must match BASE_URL subdomain
        run: |
          set -euo pipefail
          subdomain="$(echo "${BASE_URL}" | awk -F[/:.] '{print $4}')"
          echo "APP_NAME=${APP_NAME}"
          echo "BASE_URL subdomain=${subdomain}"
          if [ "${APP_NAME}" != "${subdomain}" ]; then
            echo "Mismatch: APP_NAME (${APP_NAME}) != BASE_URL subdomain (${subdomain})"
            exit 1
          fi

      - name: Wait for /mcp/health (Bearer)
        run: |
          set -euo pipefail
          if [ -z "${BDB_AUTH_TOKEN:-}" ]; then
            echo "BDB_AUTH_TOKEN is not set"; exit 1
          fi
          max_attempts=60
          attempt=0
          last_code="000"
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt+1))
            last_code=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
              "${BASE_URL}/mcp/health" || true)
            if [ "${last_code}" = "200" ]; then
              echo "Health OK (200) after ${attempt} attempts."
              break
            elif [ "${last_code}" = "401" ]; then
              echo "401 Unauthorized. Check BDB_AUTH_TOKEN in GitHub and FastCloud."; exit 1
            else
              echo "Health not ready (got ${last_code}); sleeping 10s... [${attempt}/${max_attempts}]"
              sleep 10
            fi
          done
          [ "${last_code}" = "200" ] || { echo "Never reached 200 OK (last ${last_code})."; exit 1; }

      - name: Server diag_config (assert SUPABASE_URL is set at runtime)
        run: |
          set -euo pipefail
          diag="$(curl -sS -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" "${BASE_URL}/mcp/diag_config")"
          echo "$diag" | jq .
          sup_set=$(echo "$diag" | jq -r '.supabase_url_set')
          if [ "$sup_set" != "true" ]; then
            echo "Server runtime is missing SUPABASE_URL. Set it in FastCloud → Environment."; exit 1
          fi

      - name: Supabase connectivity (tool: /mcp/tools/supabase_health)
        run: |
          set -euo pipefail
          resp="$(curl -sS -X POST \
            -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
            -H "Content-Type: application/json" \
            "${BASE_URL}/mcp/tools/supabase_health")"
          echo "$resp" | jq .

          auth_ok=$(echo "$resp" | jq -r '.auth_ok')
          status_rest=$(echo "$resp" | jq -r '.status_rest')

          if [ "$auth_ok" != "true" ]; then
            echo "Auth API not healthy (status_auth=$(echo "$resp" | jq -r '.status_auth'))"; exit 1
          fi

          if echo "$status_rest" | grep -Eq '^(200|204|405|404)$'; then
            echo "PostgREST reachable (status_rest=${status_rest})"
          else
            echo "PostgREST probe failed (status_rest=${status_rest})"; exit 1
          fi
