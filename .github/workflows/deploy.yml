name: Deploy to FastAPI Cloud

on:
  push:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    # These variables are inherited by all steps
    env:
      APP_NAME: ${{ vars.APP_NAME || 'burns-database' }}
      PORT: ${{ vars.PORT || '8080' }}
      ENABLE_DIAG: ${{ vars.ENABLE_DIAG || 'true' }}
      BASE_URL: ${{ vars.BASE_URL || 'https://burns-database.fastmcp.app' }}

      # Secrets (set these in repo Secrets â†’ Actions)
      BDB_AUTH_TOKEN: ${{ secrets.BDB_AUTH_TOKEN }}
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install FastAPI deploy CLI (with fallback)
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip
          pip install fastapi-cloud-cli || true
          if ! command -v fastapi-cloud >/dev/null 2>&1; then
            pip install "fastapi[standard]"
          fi
          command -v fastapi-cloud || true
          command -v fastapi || true

      - name: Deploy to FastAPI Cloud
        run: |
          set -euxo pipefail
          if command -v fastapi-cloud >/dev/null 2>&1; then
            CLI="fastapi-cloud"
          elif command -v fastapi >/dev/null 2>&1; then
            CLI="fastapi"
          else
            echo "Neither fastapi-cloud nor fastapi is available"; exit 127
          fi

          PORT_FIXED="${PORT}"
          $CLI deploy \
            --project "burns-legal/burns-database" \
            --entrypoint "uvicorn server:app --host 0.0.0.0 --port ${PORT_FIXED}" \
            --env APP_NAME="${APP_NAME}" \
            --env PORT="${PORT_FIXED}" \
            --env ENABLE_DIAG="${ENABLE_DIAG}" \
            --env BDB_AUTH_TOKEN="${BDB_AUTH_TOKEN}" \
            --env SUPABASE_URL="${SUPABASE_URL}" \
            --env SUPABASE_SERVICE_ROLE_KEY="${SUPABASE_SERVICE_ROLE_KEY}" \
            --env SUPABASE_ANON_KEY="${SUPABASE_ANON_KEY}" \
            --env OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --env EDGEOFN_AUTH_MODE="service_role"

      - name: Set healthcheck route (best effort)
        if: always()
        run: |
          set -euxo pipefail
          if command -v fastapi-cloud >/dev/null 2>&1; then
            fastapi-cloud healthcheck set \
              --app "${APP_NAME}" \
              --url "/mcp/health" || true
          elif command -v fastapi >/dev/null 2>&1; then
            fastapi healthcheck set \
              --app "${APP_NAME}" \
              --path "/mcp" || true
          fi

      - name: Verify /mcp/health (post-deploy)
        run: |
          set -euxo pipefail
          for i in {1..5}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
              "${BASE_URL}/mcp/health" || true)
            if [ "$code" = "200" ]; then
              echo "Health OK"
              break
            fi
            echo "Health not ready (got $code), retrying in 5s..."
            sleep 5
          done
          [ "$code" = "200" ] || (echo "Health check failed with $code"; exit 1)

      - name: Verify Supabase connectivity
        run: |
          set -euxo pipefail
          result=$(curl -sS -X POST \
          -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
          -H "Content-Type: application/json" \
          "${BASE_URL}/mcp/tools/supabase_health")
          echo "$result"
          RESULT="$result" python - <<'PY'
          import os, json
          d = json.loads(os.environ["RESULT"])
          assert "auth_ok" in d and "rest_ok" in d, "Missing keys in supabase_health output"
          print("auth_ok =", d.get("auth_ok"), "rest_ok =", d.get("rest_ok"))
          PY
