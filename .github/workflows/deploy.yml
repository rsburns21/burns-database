name: Deploy to FastMCP Cloud

on:
  push:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # App identity & defaults specific to burns-database
      APP_NAME: ${{ vars.APP_NAME || 'burns-database' }}
      PORT: ${{ vars.PORT || '8080' }}
      ENABLE_DIAG: ${{ vars.ENABLE_DIAG || 'true' }}
      BASE_URL: ${{ vars.BASE_URL || 'https://burns-database.fastmcp.app' }}

      # Required secrets/vars
      BDB_AUTH_TOKEN: ${{ secrets.BDB_AUTH_TOKEN }}
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install FastMCP Cloud CLI and jq
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install fastmcp-cloud
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
          fastcloud --version || true
          jq --version || true

      - name: Deploy to FastMCP Cloud
        shell: bash
        run: |
          set -euo pipefail
          APP_NAME_FIXED="${APP_NAME:-burns-database}"
          PORT_FIXED="${PORT:-8080}"

          echo "Deploying '${APP_NAME_FIXED}' on port ${PORT_FIXED}…"
          fastcloud deploy \
            --app "${APP_NAME_FIXED}" \
            --start "uvicorn server:app --host 0.0.0.0 --port ${PORT_FIXED}" \
            --env APP_NAME="${APP_NAME_FIXED}" \
            --env PORT="${PORT_FIXED}" \
            --env ENABLE_DIAG="${ENABLE_DIAG}" \
            --env BDB_AUTH_TOKEN="${BDB_AUTH_TOKEN}" \
            --env SUPABASE_URL="${SUPABASE_URL}" \
            --env SUPABASE_SERVICE_ROLE_KEY="${SUPABASE_SERVICE_ROLE_KEY}" \
            --env OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --env EDGEOFN_AUTH_MODE="service_role"

      - name: Set healthcheck route (best effort)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          fastcloud healthcheck set --app "${APP_NAME:-burns-database}" --path "/mcp" || true

      - name: Verify /mcp/health (post-deploy)
        shell: bash
        run: |
          set -euo pipefail
          echo "Waiting for ${BASE_URL}/mcp/health to return 200…"
          code="000"
          for i in {1..5}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
              "${BASE_URL}/mcp/health" || true)
            if [ "$code" = "200" ]; then
              echo "Health OK"
              break
            fi
            echo "Health not ready (got $code); retrying in 5s…"
            sleep 5
          done
          if [ "$code" != "200" ]; then
            echo "❌ Health check failed with $code"
            exit 1
          fi

      - name: Verify Supabase connectivity via server tool
        shell: bash
        run: |
          set -euo pipefail
          echo "Checking Supabase connectivity at ${BASE_URL}/mcp/tools/supabase_health…"
          result="$(curl -sS -X POST \
            -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
            -H "Content-Type: application/json" \
            "${BASE_URL}/mcp/tools/supabase_health")"
          echo "Response: $result"
          echo "$result" | jq -e '.auth_ok and .rest_ok' >/dev/null
          echo "✅ Supabase check passed: auth_ok=$(echo "$result" | jq -r .auth_ok), rest_ok=$(echo "$result" | jq -r .rest_ok)"
