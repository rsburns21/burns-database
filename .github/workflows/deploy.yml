name: Post-Deploy Smoke Tests (FastCloud)

on:
  push:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: burns-database-postdeploy
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  post_deploy_checks:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      # App + Prod URL (keep these in GitHub Actions → Variables)
      APP_NAME: ${{ vars.APP_NAME || 'burns-database' }}
      BASE_URL: ${{ vars.BASE_URL || 'https://burns-database.fastmcp.app' }}

      # Secrets (GitHub Actions → Secrets)
      BDB_AUTH_TOKEN: ${{ secrets.BDB_AUTH_TOKEN }}
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Install jq"
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: "Guard — APP_NAME must match BASE_URL subdomain"
        shell: bash
        run: |
          set -euo pipefail
          subdomain="$(echo "${BASE_URL}" | awk -F[/:.] '{print $4}')"
          echo "APP_NAME=${APP_NAME}"
          echo "BASE_URL subdomain=${subdomain}"
          if [ "${APP_NAME}" != "${subdomain}" ]; then
            echo "Mismatch: APP_NAME (${APP_NAME}) != BASE_URL subdomain (${subdomain})"
            exit 1
          fi

      - name: "Wait for FastCloud deployment to go live"
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${BDB_AUTH_TOKEN:-}" ]; then
            echo "BDB_AUTH_TOKEN is not set"; exit 1
          fi

          max_attempts=60
          attempt=0
          last_code="000"
          while [ $attempt -lt $max_attempts ]; do
            attempt=$((attempt+1))
            last_code=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
              "${BASE_URL}/mcp/health" || true)
            if [ "${last_code}" = "200" ]; then
              echo "Health OK (200) after ${attempt} attempts."
              break
            elif [ "${last_code}" = "401" ]; then
              echo "Health endpoint returned 401 Unauthorized. Check BDB_AUTH_TOKEN in GitHub and FastCloud."
              exit 1
            else
              echo "Health not ready (got ${last_code}); retrying in 20s... [${attempt}/${max_attempts}]"
              sleep 20
            fi
          done

          if [ "${last_code}" != "200" ]; then
            echo "Health never reached 200 OK (last ${last_code})."
            exit 1
          fi

      - name: "Supabase connectivity (tool: /mcp/tools/supabase_health)"
        shell: bash
        run: |
          set -euo pipefail
          resp="$(curl -sS -X POST \
            -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
            -H "Content-Type: application/json" \
            "${BASE_URL}/mcp/tools/supabase_health")" || {
              echo "Request failed"; exit 1; }
          echo "Response: $resp"

          echo "$resp" | jq -e 'has("auth_ok") and has("rest_ok")' >/dev/null || {
            echo "Response missing expected keys (auth_ok/rest_ok)"; exit 1; }

          auth_ok=$(echo "$resp" | jq -r '.auth_ok')
          rest_ok=$(echo "$resp" | jq -r '.rest_ok')
          echo "auth_ok=$auth_ok rest_ok=$rest_ok"

          if [ "$auth_ok" != "true" ] || [ "$rest_ok" != "true" ]; then
            echo "Supabase connectivity check failed"
            exit 1
          fi
