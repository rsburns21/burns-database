name: Deploy to FastAPI Cloud

on:
  push:
    branches: [ master ]
  workflow_dispatch:

concurrency:
  group: deploy-production
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      APP_NAME: ${{ vars.APP_NAME || 'burns-database' }}
      PORT: ${{ vars.PORT || '8080' }}
      ENABLE_DIAG: ${{ vars.ENABLE_DIAG || 'true' }}
      BASE_URL: ${{ vars.BASE_URL || 'https://burns-database.fastmcp.app' }}

      # Secrets / Vars
      BDB_AUTH_TOKEN: ${{ secrets.BDB_AUTH_TOKEN }}
      SUPABASE_URL: ${{ vars.SUPABASE_URL }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies (CLI + jq)
        shell: bash
        run: |
          set -euo pipefail
          python -m pip install --upgrade pip
          pip install fastapi-cloud-cli || true
          if ! command -v fastapi-cloud >/dev/null 2>&1; then
            pip install "fastapi[standard]"
          fi
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi
          command -v fastapi-cloud || true
          command -v fastapi || true
          command -v jq || true

      - name: Deploy to FastAPI Cloud
        shell: bash
        run: |
          set -euo pipefail
          if command -v fastapi-cloud >/dev/null 2>&1; then
            CLI="fastapi-cloud"
          elif command -v fastapi >/dev/null 2>&1; then
            CLI="fastapi"
          else
            echo "Neither fastapi-cloud nor fastapi is available"
            exit 127
          fi

          PORT_FIXED="${PORT}"

          "$CLI" deploy \
            --project "burns-legal/burns-database" \
            --entrypoint "uvicorn server:app --host 0.0.0.0 --port ${PORT_FIXED}" \
            --env APP_NAME="${APP_NAME}" \
            --env PORT="${PORT_FIXED}" \
            --env ENABLE_DIAG="${ENABLE_DIAG}" \
            --env BDB_AUTH_TOKEN="${BDB_AUTH_TOKEN}" \
            --env SUPABASE_URL="${SUPABASE_URL}" \
            --env SUPABASE_SERVICE_ROLE_KEY="${SUPABASE_SERVICE_ROLE_KEY}" \
            --env OPENAI_API_KEY="${OPENAI_API_KEY}" \
            --env EDGEOFN_AUTH_MODE="service_role"

      - name: Set healthcheck route (best effort)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          if command -v fastapi-cloud >/dev/null 2>&1; then
            fastapi-cloud healthcheck set --app "${APP_NAME}" --url "/mcp/health" || true
          elif command -v fastapi >/dev/null 2>&1; then
            fastapi healthcheck set --app "${APP_NAME}" --path "/mcp" || true
          fi

      - name: Verify /mcp/health (post-deploy)
        shell: bash
        run: |
          set -euo pipefail
          code="000"
          for i in 1 2 3 4 5; do
            code=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
              "${BASE_URL}/mcp/health" || true)
            if [ "$code" = "200" ]; then
              echo "Health OK"
              break
            fi
            echo "Health not ready (got $code), retrying in 5s..."
            sleep 5
          done
          if [ "$code" != "200" ]; then
            echo "Health check failed with $code"
            exit 1
          fi

      - name: Verify Supabase connectivity
        shell: bash
        run: |
          set -euo pipefail
          result="$(curl -sS -X POST \
            -H "Authorization: Bearer ${BDB_AUTH_TOKEN}" \
            -H "Content-Type: application/json" \
            "${BASE_URL}/mcp/tools/supabase_health")"

          echo "$result"

          # Validate it's JSON and has the keys we need
          echo "$result" | jq -e '.auth_ok and .rest_ok' >/dev/null

          echo "auth_ok = $(echo "$result" | jq -r '.auth_ok')  rest_ok = $(echo "$result" | jq -r '.rest_ok')"
