# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Static compile check
        run: |
          python -m py_compile server.py

      - name: Lint (ruff) if available
        run: |
          pip install ruff
          ruff check .

      - name: Type check (mypy) if config present
        run: |
          pip install mypy
          # Only run mypy if we find a config or the user created one
          if [ -f mypy.ini ] || [ -f setup.cfg ] || grep -q "\[tool.mypy\]" pyproject.toml 2>/dev/null; then
            mypy .
          else
            echo "Skipping mypy (no config found)."
          fi

      - name: Run tests if tests/ exists
        run: |
          pip install pytest
          if [ -d tests ]; then
            pytest -q --maxfail=1 --disable-warnings
          else
            echo "Skipping pytest (no tests/ directory)."
          fi

      - name: Dependency audit (pip-audit)
        run: |
          pip install pip-audit
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt
          else
            echo "Skipping pip-audit (no requirements.txt)."
          fi

      - name: Import ASGI app and ping a route
        run: |
          python - <<'PY'
          import sys
          import server
          assert hasattr(server, "app"), "server.app not found"
          print("OK: server.app exists")

          try:
              from starlette.testclient import TestClient
              client = TestClient(server.app)
              # Try /health first; fall back to /
              path = "/health"
              resp = client.get(path)
              if resp.status_code >= 400:
                  resp = client.get("/")
              print(f"OK: request returned {resp.status_code}")
          except Exception as e:
              # Not fatal for smoke; continue if app import worked
              print(f"Note: skipped HTTP probe: {e}", file=sys.stderr)
          PY

      - name: Upload artifacts on failure (logs/coverage)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            .pytest_cache
            .coverage
            coverage.xml
            logs/**
